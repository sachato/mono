name: Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Backend:
  #   if: ${{ github.event_name == 'pull_request' && !contains(github.event.pull_request.head.ref, '#cesi') }}
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: backend

  #   services:
  #     mariadb:
  #       image: mariadb:latest
  #       env:
  #         MARIADB_ROOT_PASSWORD: toor
  #         MARIADB_DATABASE: test
  #         MARIADB_USER: test
  #         MARIADB_PASSWORD: test
  #       ports:
  #         - 3306:3306
  #       options: --health-cmd="healthcheck.sh --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3

  #   env:
  #     BDD_HOST: 127.0.0.1
  #     BDD_NAME: test
  #     BDD_USER: test
  #     BDD_PASS: test

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Check Database Cnx
  #       run: |
  #         sudo apt-get install -y mysql-client
  #         mysql --host 127.0.0.1 --port 3306 -u root -ptoor -e "SHOW DATABASES"

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.x

  #     - name: Just for joke
  #       run: |
  #         node -v

  #     - name: Install dependencies
  #       run: npm i

  #     - name: Init BDD
  #       run: npm run initbdd

  #     - name: Populate BDD
  #       run: |
  #         mysql -u root -ptoor --host 127.0.0.1 --port 3306 --database test < ./test/insert_test_user.sql

  #     - name: Run all Test And Coverage
  #       run: npm run test:cov

  #     - name: Upload Coverage Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-repport
  #         path: backend/coverage
  #         retention-days: 3

  # Frontend:
    needs: Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Start build backend
        working-directory: backend
        run: |
          docker compose -f docker-compose-build.yml up -d
          docker ps -a

      - name: Sleep For 10 Seconds
        uses: jakejarvis/wait-action@master
        with:
          time: "10s"

      - name: Test Backend Container
        if: success()
        run: curl -s http://127.0.0.1:12000

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install cypess E2E
        uses: cypress-io/github-action@v6
        with:
          runTests: false
          working-directory: frontend

      - name: Install Dependencies
        run: npm install

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          install: false
          working-directory: frontend
          start: npm run dev

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
          retention-days: 1

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: frontend/cypress/videos
          retention-days: 3

      - name: Stop build backend
        if: always()
        working-directory: backend
        run: docker compose -f docker-compose-build.yml down

  QualityBack:
    needs: [Backend, Frontend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: SonarCloud
        uses: sonarsource/sonarcloud-github-action@v3.1.0
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACK }}
